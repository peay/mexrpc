// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: proto.capnp

#ifndef CAPNP_INCLUDED_814011bf5f2fb1dd_
#define CAPNP_INCLUDED_814011bf5f2fb1dd_

#include <capnp/generated-header-support.h>
#include <capnp/capability.h>

#if CAPNP_VERSION != 4001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct ArgList {
  ArgList() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum class Type: uint16_t {
    LEFT,
    RIGHT,
  };

  struct Arg;
};

struct ArgList::Arg {
  Arg() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct Call {
  Call() = delete;

  class Client;
  class Server;

  struct CallParams;
  struct CallResults;
};

struct Call::CallParams {
  CallParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct Call::CallResults {
  CallResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_e1ab59e0a94dc87b;
extern const ::capnp::_::RawSchema s_db60f75ef1429dd5;
extern const ::capnp::_::RawSchema s_b2484ccfbdb81c3b;
extern const ::capnp::_::RawSchema s_f786a4dc913e93f7;
extern const ::capnp::_::RawSchema s_fe7916314568cb4c;
extern const ::capnp::_::RawSchema s_e73208fa0252b1b4;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::ArgList, e1ab59e0a94dc87b,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_ENUM(
    ::ArgList::Type, db60f75ef1429dd5);
CAPNP_DECLARE_STRUCT(
    ::ArgList::Arg, b2484ccfbdb81c3b,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_INTERFACE(
    ::Call, f786a4dc913e93f7);
CAPNP_DECLARE_STRUCT(
    ::Call::CallParams, fe7916314568cb4c,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::Call::CallResults, e73208fa0252b1b4,
    0, 1, POINTER);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class ArgList::Reader {
public:
  typedef ArgList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::ArgList::Type getType() const;

  inline bool hasArgs() const;
  inline  ::capnp::List< ::ArgList::Arg>::Reader getArgs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ArgList::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ArgList::Reader reader) {
  return ::capnp::_::structString<ArgList>(reader._reader);
}

class ArgList::Builder {
public:
  typedef ArgList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::ArgList::Type getType();
  inline void setType( ::ArgList::Type value);

  inline bool hasArgs();
  inline  ::capnp::List< ::ArgList::Arg>::Builder getArgs();
  inline void setArgs( ::capnp::List< ::ArgList::Arg>::Reader value);
  inline  ::capnp::List< ::ArgList::Arg>::Builder initArgs(unsigned int size);
  inline void adoptArgs(::capnp::Orphan< ::capnp::List< ::ArgList::Arg>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ArgList::Arg>> disownArgs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ArgList::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ArgList::Builder builder) {
  return ::capnp::_::structString<ArgList>(builder._builder.asReader());
}

class ArgList::Pipeline {
public:
  typedef ArgList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class ArgList::Arg::Reader {
public:
  typedef Arg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline  ::uint32_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ArgList::Arg::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ArgList::Arg::Reader reader) {
  return ::capnp::_::structString<ArgList::Arg>(reader._reader);
}

class ArgList::Arg::Builder {
public:
  typedef Arg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline  ::uint32_t getSize();
  inline void setSize( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ArgList::Arg::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ArgList::Arg::Builder builder) {
  return ::capnp::_::structString<ArgList::Arg>(builder._builder.asReader());
}

class ArgList::Arg::Pipeline {
public:
  typedef Arg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Call::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Call Calls;
  typedef Call Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename T, typename = ::kj::EnableIf< ::kj::canConvert<T*, Server*>()>>
  Client(::kj::Own<T>&& server);
  template <typename T, typename = ::kj::EnableIf< ::kj::canConvert<T*, Client*>()>>
  Client(::kj::Promise<T>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request<Call::CallParams, Call::CallResults> callRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Call::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Call Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef Call::CallParams CallParams;
  typedef Call::CallResults CallResults;
  typedef ::capnp::CallContext<CallParams, CallResults> CallContext;
  virtual ::kj::Promise<void> call(CallContext context);

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};

class Call::CallParams::Reader {
public:
  typedef CallParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasIn() const;
  inline  ::ArgList::Reader getIn() const;

  inline  ::int64_t getOut_size() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Call::CallParams::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Call::CallParams::Reader reader) {
  return ::capnp::_::structString<Call::CallParams>(reader._reader);
}

class Call::CallParams::Builder {
public:
  typedef CallParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasIn();
  inline  ::ArgList::Builder getIn();
  inline void setIn( ::ArgList::Reader value);
  inline  ::ArgList::Builder initIn();
  inline void adoptIn(::capnp::Orphan< ::ArgList>&& value);
  inline ::capnp::Orphan< ::ArgList> disownIn();

  inline  ::int64_t getOut_size();
  inline void setOut_size( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Call::CallParams::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Call::CallParams::Builder builder) {
  return ::capnp::_::structString<Call::CallParams>(builder._builder.asReader());
}

class Call::CallParams::Pipeline {
public:
  typedef CallParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ArgList::Pipeline getIn();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Call::CallResults::Reader {
public:
  typedef CallResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasOut() const;
  inline  ::ArgList::Reader getOut() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Call::CallResults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Call::CallResults::Reader reader) {
  return ::capnp::_::structString<Call::CallResults>(reader._reader);
}

class Call::CallResults::Builder {
public:
  typedef CallResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasOut();
  inline  ::ArgList::Builder getOut();
  inline void setOut( ::ArgList::Reader value);
  inline  ::ArgList::Builder initOut();
  inline void adoptOut(::capnp::Orphan< ::ArgList>&& value);
  inline ::capnp::Orphan< ::ArgList> disownOut();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Call::CallResults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Call::CallResults::Builder builder) {
  return ::capnp::_::structString<Call::CallResults>(builder._builder.asReader());
}

class Call::CallResults::Pipeline {
public:
  typedef CallResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ArgList::Pipeline getOut();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline  ::ArgList::Type ArgList::Reader::getType() const {
  return _reader.getDataField< ::ArgList::Type>(
      0 * ::capnp::ELEMENTS);
}

inline  ::ArgList::Type ArgList::Builder::getType() {
  return _builder.getDataField< ::ArgList::Type>(
      0 * ::capnp::ELEMENTS);
}
inline void ArgList::Builder::setType( ::ArgList::Type value) {
  _builder.setDataField< ::ArgList::Type>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ArgList::Reader::hasArgs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ArgList::Builder::hasArgs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ArgList::Arg>::Reader ArgList::Reader::getArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArgList::Arg>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ArgList::Arg>::Builder ArgList::Builder::getArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArgList::Arg>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ArgList::Builder::setArgs( ::capnp::List< ::ArgList::Arg>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ArgList::Arg>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ArgList::Arg>::Builder ArgList::Builder::initArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArgList::Arg>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ArgList::Builder::adoptArgs(
    ::capnp::Orphan< ::capnp::List< ::ArgList::Arg>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ArgList::Arg>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ArgList::Arg>> ArgList::Builder::disownArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArgList::Arg>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ArgList::Arg::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ArgList::Arg::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ArgList::Arg::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ArgList::Arg::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ArgList::Arg::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ArgList::Arg::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ArgList::Arg::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ArgList::Arg::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t ArgList::Arg::Reader::getSize() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ArgList::Arg::Builder::getSize() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ArgList::Arg::Builder::setSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline Call::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Call::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename T, typename>
inline Call::Client::Client(::kj::Own<T>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename T, typename>
inline Call::Client::Client(::kj::Promise<T>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Call::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline Call::Client& Call::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline Call::Client& Call::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

inline bool Call::CallParams::Reader::hasIn() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Call::CallParams::Builder::hasIn() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ArgList::Reader Call::CallParams::Reader::getIn() const {
  return ::capnp::_::PointerHelpers< ::ArgList>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ArgList::Builder Call::CallParams::Builder::getIn() {
  return ::capnp::_::PointerHelpers< ::ArgList>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ArgList::Pipeline Call::CallParams::Pipeline::getIn() {
  return  ::ArgList::Pipeline(_typeless.getPointerField(0));
}
inline void Call::CallParams::Builder::setIn( ::ArgList::Reader value) {
  ::capnp::_::PointerHelpers< ::ArgList>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ArgList::Builder Call::CallParams::Builder::initIn() {
  return ::capnp::_::PointerHelpers< ::ArgList>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Call::CallParams::Builder::adoptIn(
    ::capnp::Orphan< ::ArgList>&& value) {
  ::capnp::_::PointerHelpers< ::ArgList>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ArgList> Call::CallParams::Builder::disownIn() {
  return ::capnp::_::PointerHelpers< ::ArgList>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t Call::CallParams::Reader::getOut_size() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Call::CallParams::Builder::getOut_size() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Call::CallParams::Builder::setOut_size( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Call::CallResults::Reader::hasOut() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Call::CallResults::Builder::hasOut() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ArgList::Reader Call::CallResults::Reader::getOut() const {
  return ::capnp::_::PointerHelpers< ::ArgList>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ArgList::Builder Call::CallResults::Builder::getOut() {
  return ::capnp::_::PointerHelpers< ::ArgList>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ArgList::Pipeline Call::CallResults::Pipeline::getOut() {
  return  ::ArgList::Pipeline(_typeless.getPointerField(0));
}
inline void Call::CallResults::Builder::setOut( ::ArgList::Reader value) {
  ::capnp::_::PointerHelpers< ::ArgList>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ArgList::Builder Call::CallResults::Builder::initOut() {
  return ::capnp::_::PointerHelpers< ::ArgList>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Call::CallResults::Builder::adoptOut(
    ::capnp::Orphan< ::ArgList>&& value) {
  ::capnp::_::PointerHelpers< ::ArgList>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ArgList> Call::CallResults::Builder::disownOut() {
  return ::capnp::_::PointerHelpers< ::ArgList>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_814011bf5f2fb1dd_
